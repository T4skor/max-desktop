#!/bin/sh
set -e

if [ ! -d /sys/firmware/efi/efivars ]; then
  echo " *  NO UEFI found /sys/firmware/efi/efivars "
  exit
fi

if [ ! -e /bin/efibootmgr ]; then
  echo " * No efibootmgr found"
  exit
fi

if [ "$1" = "remove" ]; then
  echo -n " Are you sure to remove UEFI MAX entries?? [y/N] "
  read remove
  if [ "$remove" != "y" ]; then
    exit
  fi
  # remove MAX entry
  EFI_NUM=$(efibootmgr | awk '/MAX/ {print $1}'| sed -e 's/Boot//g' -e 's/*//g'| tail -1)
  [ ! -z $EFI_NUM ] && efibootmgr -q -B -b "$EFI_NUM" -d /dev/sda
  # ubuntu install max-7.0 entry (don't works)
  EFI_NUM_UBUNTU=$(efibootmgr | awk '/max\-/ {print $1}'| sed -e 's/Boot//g' -e 's/*//g'| tail -1)
  [ ! -z $EFI_NUM_UBUNTU ] && efibootmgr -q -B -b "$EFI_NUM_UBUNTU" -d /dev/sda
  rm -rf /boot/efi/EFI/MAX/
  echo " * Removed."
  exit
fi

EFI_NUM=$(efibootmgr | awk '/MAX/ {print $1}'| sed -e 's/Boot//g' -e 's/*//g'| tail -1)
if [ ! -z $EFI_NUM ]; then
  echo " * UEFI MAX is installed, run with 'remove' arg to delete"
  exit
fi




EFI_PART=$(awk '/boot\/efi/ {print $1}' /proc/mounts| tail -1)

if [ -x $EFI_PART ]; then
  echo " * NO UEFI partition"
  exit
fi

EFI_NUM=$(echo $EFI_PART| cut -c9-)
MAX_PART=$(mount | awk '/ \/ / {print $1}')
MAX_GRUB=$(grub-probe --device $MAX_PART --target=drive)



echo " * Installing GRUB in UEFI part $EFI_PART to boot $MAX_PART ..."

if [ ! -d /boot/efi/EFI ]; then
  # remount (Ubiquity don't mount efi dir)
  umount $EFI_PART || true
  mkdir -p /boot/efi
  mount $EFI_PART /boot/efi
fi

if [ ! -d /boot/efi/EFI ]; then
  echo " * No /boot/efi/EFI found"
  exit
fi

EFI_NUM_UBUNTU=$(efibootmgr | awk '/max\-/ {print $1}'| sed -e 's/Boot//g' -e 's/*//g'| tail -1)
[ ! -z $EFI_NUM_UBUNTU ] && efibootmgr -q -B -b "$EFI_NUM_UBUNTU" -d /dev/sda

# generate grubx64.efi
# https://help.ubuntu.com/community/UEFIBooting
#grub-mkimage -O x86_64-efi -d /usr/lib/grub/x86_64-efi/ -o /tmp/grubx64.efi -p "" part_gpt part_msdos ntfs ntfscomp hfsplus fat ext2 normal chain boot configfile linux multiboot efi_gop efi_uga gettext gfxterm gzio png video_bochs video_cirrus search_fs_file search_fs_uuid search_label search loadenv boot cat chain cmp echo extcmd help ls reboot test
# update from https://github.com/max-linux/max-desktop/issues/677
grub-mkimage --format=x86_64-efi -p /EFI/max-8.0 -o /tmp/grubx64.efi acpi all_video bitmap bitmap bitmap_scale boot btrfs bufio bufio chain configfile crypto datetime disk diskfilter diskfilter echo efifwsetup efi_gop efinet efi_uga ext2 extcmd extcmd font fshelp gcry_sha512 gettext gfxmenu gfxterm gfxterm_background gzio halt hfsplus iso9660 jpeg keystatus linux linuxefi loadenv lsefi lsefimmap lsefisystab lssal lzopio memdisk minicmd mmap normal part_gpt part_msdos password_pbkdf2 pbkdf2 priority_queue reboot relocator search search_fs_file search_fs_uuid search_label sleep terminal test trig video video_bochs video_cirrus video_colors video_fb fat help ls lspci

mkdir -p /boot/efi/EFI/MAX/
cp /tmp/grubx64.efi /boot/efi/EFI/MAX/

cat << EOF > /boot/efi/EFI/MAX/grub.cfg
set root='${MAX_GRUB}'
configfile /boot/grub/grub.cfg
EOF


efibootmgr -q -c -p $EFI_NUM -d /dev/sda -l "\EFI\MAX\grubx64.efi" -L "MAX (grub)"

# set MAX as default
EFI_NUM=$(efibootmgr | awk '/MAX/ {print $1}'| sed -e 's/Boot//g' -e 's/*//g'| tail -1)
[ ! -z $EFI_NUM ] && efibootmgr -q -a -b "$EFI_NUM" -d /dev/sda

rm -f /tmp/grubx64.efi



if [ -e "/boot/efi/EFI/Microsoft/Boot/BCD" ]; then
  # replace os.prober with new detection script
  grep -q "^GRUB_DISABLE_OS_PROBER=true" /etc/default/grub || echo "GRUB_DISABLE_OS_PROBER=true" >> /etc/default/grub
  cp /usr/share/max/25_windows_uefi /etc/grub.d/25_windows_uefi
  chmod +x /etc/grub.d/25_windows_uefi
fi


update-grub

echo " * Done"
