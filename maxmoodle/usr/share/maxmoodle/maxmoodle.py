#!/usr/bin/env python
# -*- coding: UTF-8 -*-
##########################################################################
# MaXMoodle writen by MarioDebian <mariodebian@gmail.com>
#
#    MaXMoodle version __VERSION__
#
# Copyright (c) 2009 Mario Izquierdo <mariodebian@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
###########################################################################

import sys
import os
import pwd


import pygtk
pygtk.require('2.0')
from gtk import *
import gtk.glade

import time
import getopt
from gettext import gettext as _
from gettext import bindtextdomain, textdomain
from locale import setlocale, LC_ALL

from subprocess import Popen, PIPE, STDOUT
from threading import Thread

import gobject

#import threading
gtk.gdk.threads_init()
gobject.threads_init()





debug=False
PACKAGE="maxmoodle"


GLADE_DIR = "/usr/share/maxmoodle/"
IMG_DIR = "/usr/share/pixmaps/"
LOCALE_DIR = "/usr/share/locale/"
MOODLE_CONF="/etc/moodle/apache.conf"

def print_debug(txt):
    if debug:
        print >> sys.stderr, "%s::%s" %("maxmoodle", txt)
    return

def usage():
    print "maxmoodle help:"
    print ""
    print "   maxmoodle -d [--debug]  (write debug data to stdout)"
    print "   maxmoodle -h [--help]   (this help)"


try:
    opts, args = getopt.getopt(sys.argv[1:], ":hd", ["help", "debug"])
except getopt.error, msg:
    print msg
    print "for command line options use tcosconfig --help"
    sys.exit(2)

# process options
for o, a in opts:
    if o in ("-d", "--debug"):
        print "DEBUG ACTIVE"
        debug = True
    if o in ("-h", "--help"):
        usage()
        sys.exit()

################################################################################



APACHE_PRE="""
# This file has been generated by maxmoodle

Alias /moodle /usr/share/moodle/

<DirectoryMatch /usr/share/moodle/>

Options +FollowSymLinks
AllowOverride None

"""

APACHE_POST="""


<IfModule mod_php5.c>
	php_flag magic_quotes_gpc On
	php_flag magic_quotes_runtime Off
	php_flag file_uploads On
	php_flag short_open_tag On
	php_flag session.auto_start Off
	php_flag session.bug_compat_warn Off

	php_value upload_max_filesize 2M
	php_value post_max_size 2M
</IfModule>


<IfModule mod_dir.c>
	DirectoryIndex index.php
</IfModule>

</DirectoryMatch>
"""



################################################################################

class MaXMoodle:
    def __init__(self):
        print_debug("__init__()")
        
        # vars
        self.v={}
        self.begin_usernumber=1
        gtk.glade.bindtextdomain(PACKAGE, LOCALE_DIR)
        gtk.glade.textdomain(PACKAGE)

        # gettext support
        setlocale( LC_ALL )
        bindtextdomain( PACKAGE, LOCALE_DIR )
        textdomain( PACKAGE )
        
        """
        order deny,allow
        deny from all
        allow from 127.0.0.0/255.0.0.0
        """
        self.OPTIONS=[
                [ _("Only from this machine"), ['order deny,allow', 'deny from all', 'allow from 127.0.0.0/255.0.0.0', 'allow from 127.0.1.0/255.0.0.0'] ], 
                [ _("Allow from any host"),    ['order allow,deny', 'allow from all'] ],
                    ]
        
        # Widgets
        self.ui = gtk.glade.XML(GLADE_DIR + 'maxmoodle.glade')
        self.mainwindow = self.ui.get_widget('mainwindow')
        self.mainwindow.set_icon_from_file(IMG_DIR +'moodle.png')
        
        # close windows signals
        self.mainwindow.connect('destroy', self.quitapp )
        self.mainwindow.connect('delete_event', self.quitapp)
        
        self.button_quit=self.ui.get_widget("btn_quit")
        self.button_quit.connect('clicked', self.quitapp)
        
        
        # widgets
        self.w={}
        for widget in ['img_logo', 'combo_options', 'btn_configure', 'lbl_message']:
            self.w[widget]=self.ui.get_widget(widget)
            print_debug("widget name=%s obj=%s"%(widget, self.w[widget]))
        
        self.w['lbl_message'].set_text("")
        self.w['lbl_message'].show()
        self.w['img_logo'].set_from_file(IMG_DIR + 'moodle.png')
        self.w['combo_options'].connect('changed', self.combo_options_change )
        self.w['btn_configure'].connect('clicked', self.on_btn_configure )
        self.w['btn_configure'].set_sensitive(True)
        
        
        self.populate_select(self.w['combo_options'], self.OPTIONS)
        self.set_active_in_select(self.w['combo_options'], self.OPTIONS[0][0])
        
        
        
    def combo_options_change(self, widget):
        print_debug("combo_options_change() '%s'"%self.read_select_value(widget))
        self.w['btn_configure'].set_sensitive(True)

    def on_btn_configure(self, *args):
        th=Thread(target=self.configure_apache)
        th.start()

    def configure_apache(self, *args):
        print_debug("configure_apache() ")
        mode=self.read_select_value(self.w['combo_options'])
        txt=None
        for item in self.OPTIONS:
            print_debug("item[0]=%s mode=%s"%(item[0], mode) )
            if item[0] == mode:
                txt=item[1]
                print_debug("configure_apache() setting mode with %s"%txt)
        if not txt:
            return
        
        # open config and write new
        f=open(MOODLE_CONF, 'w')
        f.write(APACHE_PRE)
        f.write("# settings for '%s'\n"%(mode))
        for line in txt:
            f.write("%s\n"%line)
        f.write(APACHE_POST)
        f.close()

        # chmod to www-data and 640
        os.chown(MOODLE_CONF, pwd.getpwnam('www-data')[2], pwd.getpwnam('www-data')[3])
        os.chmod(MOODLE_CONF, 0640)

        # link if no exists
        if not os.path.lexists("/etc/apache2/conf-enabled/moodle.conf"):
            os.symlink(MOODLE_CONF, "/etc/apache2/conf-enabled/moodle.conf")

        # reload apache
        result=self.exe_cmd("/etc/init.d/apache2 reload")
        fail=False
        for line in result:
            if "fail" in line: fail=True
            if "OK" in line: fail=False
            if "done" in line: fail=False
        
        # update lbl_message        
        gtk.gdk.threads_enter()
        if not fail:
            self.w['lbl_message'].set_markup( _("<b>Moodle configured</b>") )
        else:
            self.w['lbl_message'].set_markup( _("<b>Error configuring moodle.</b>") )
        gtk.gdk.threads_leave()
            
        

################### combo stuff ##############################

    def populate_select(self, widget, values):
        valuelist = gtk.ListStore(str)
        for value in values:
            valuelist.append([value[0]])
        widget.set_model(valuelist)
        #widget.set_text_column(0)
        if widget.get_text_column() != 0:
            widget.set_text_column(0)
        model=widget.get_model()
        return

    def set_active_in_select(self, widget, default):
        model=widget.get_model()
        for i in range(len(model)):
            if model[i][0] == default:
                print_debug ("set_active_in_select() default is '%s', index %d" %( model[i][0] , i ) )
                widget.set_active(i)
        return

    def read_select_value(self, widget):
        selected=-1
        try:
            selected=widget.get_active()
        except:
            print_debug ( "read_select() ERROR reading " )
        model=widget.get_model()
        value=model[selected][0]
        print_debug ( "read_select() reading %s" %(value) )
        return value





################################################################################


    def exe_cmd(self, cmd, verbose=1):
        print_debug("exe_cmd() cmd=%s" %cmd)
        
        self.p = Popen(cmd, shell=True, bufsize=0, stdout=PIPE, stderr=STDOUT, close_fds=True)
        output=[]
        stdout = self.p.stdout
        for line in stdout.readlines():
            if line != '\n':
                line=line.replace('\n', '')
                output.append(line)
        if len(output) == 1:
            return output[0]
        elif len(output) > 1:
            if verbose==1:
                print_debug ( "exe_cmd(%s) %s" %(cmd, output) )
            return output
        else:
            if verbose == 1:
                print_debug ( "exe_cmd(%s)=None" %(cmd) )
            return []



    def quitapp(self,*args):
        print_debug ( "Exiting" )
        self.mainloop.quit()

    def run (self):
        self.mainloop = gobject.MainLoop()
        try:
            self.mainloop.run()
        except KeyboardInterrupt: # Press Ctrl+C
            self.quitapp()
   


if __name__ == '__main__':
    app = MaXMoodle ()
    # Run app
    app.run ()
